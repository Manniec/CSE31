TPS Activity 1:
1.  Functions return values while procedures don't 
    return values. Methods are used in object-oriented 
    programming as a part of a class.
3.  #include<stdio.h>

    int sum(int a0, int a1){
        return a0 + a1;
    }

    int main(){
        int m = 10, n = 5;
        int v0 = sum(m,n);
        printf("%d\n", v0);
        return 0;
    }
4.  j SUM happens at line 12. it tells you to jump to line 20
    which adds $a0 and $a1 and saves the sum to $v0
5.  no j is for jumping to lables. jr is for jumping to lines of code 
    saved in a repository $ra. the correct usage is to use jal to save 
    the previous location into $ra before jumping, and return using jr.
    if you wanted to make a label for that line you would only be able to 
    jump and return from one point in the code.
6.  Retun address is supposed to be saved at line 11 before jumping, but 
    the address saved should be for the line after the jump.
    its saved as 0. But it should be saves as the address of line 13 instead.
7.  Assembles but runs with errors. invalid reurn address in $ra
    Error in : invalid program counter value: 0x00000000
    Go: execution terminated with errors.
8.  It should return to address 0x00400020 after sum
9.  changing it doesnt work bc addi gets changed to lui, ori, and add bc the 
    address is too big to complete in one step. The new return address has to
    be after 0x00400020 (4194336 in deci) at 0x00400028 (4194344 in deci)
    instead
10. 0x00400028(4194344 in deci) is the new return address, output of program is 15
11. Instead of j, use jal
12. #addi $ra,$zero, 4194344
	jal SUM

TPS Activity 2:
1.  38
2.  Stores x in $s0 and y in $s1, line 8-11
    Calls sum, line 14-15
    Add x and y, line 16
    Add that to sum's return, line 17
    Print value.
3.  After calling jal, its return value is saved in $ra, but if you call another
    function after that, the value in $ra gets over ridden. So you have to save
    the retun address to the stack before jumping to sub, and restore it after
4.  push value of $a0 to stack and restore it after.
5.  the value in $s0 gets replaced with value of m (15). Should save to stack and restore it
6.  SUM: 	addi $sp, $sp, -12
		sw $s0, 8($sp)		#Save $s0 as a callee
		sw $a0, 0($sp)		#Save $a0 before jumping
		sw $ra, 4($sp)		#Save $ra before jumping
		
		la $t0, m
		lw $s0, 0($t0)		# s0 = m
		add $a0, $s0, $a0	# Update a0 as new argument for SUB
		jal SUB
		
		lw $a0, 0($sp)		#restore $a0
		lw $ra, 4($sp)		#restore $ra
		lw $s0, 8($sp)
		
		add $v0, $a0, $v0	#add result of sub to result of sum
		jr $ra			#return to main