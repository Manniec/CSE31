TPS Activity 1:
1.  Program outputs 2
2.  You would expect it to be 0x41
3.  For four_ints[0] it outputs : 41414141
4.  For four_ints[1] it outputs : 2
    this makes sense because a char is probably smaller than an int, so all 4 char indices of 
    four_c are contained in four_ints[0], so changes dont affect four_ints[1]
5a. One array was allocated
5b. four_ints and four_c are both pointing to the start of the array four_ints, but the size of 
    a char is different. so the pointer indices differently, but they both point to the same place in the beginning
5c. four_ints[0]: 41414141
    four_ints[1]: 2
    four_ints[2]: 2
    four_ints[3]: 2
    four_c[0]: 41
    four_c[1]: 41
    four_c[2]: 41
    four_c[3]: 41
6.  The adresses of elements in four_ints are 4 locations apart 
    four_ints[0]: 0x7ffeef7a1af0
    four_ints[1]: 0x7ffeef7a1af4
    four_ints[2]: 0x7ffeef7a1af8
    four_ints[3]: 0x7ffeef7a1afc
8.  four_c elements are 1 location apart
    four_c[0]: 0x7ffeef7a1af0
    four_c[1]: 0x7ffeef7a1af1
    four_c[2]: 0x7ffeef7a1af2
    four_c[3]: 0x7ffeef7a1af3

TPS Activity 2:
1.  Creates a pointer to a portion of memory in the heap that is big enought to containe
    5 pointers to integers.
2.  arr[i] or *(arr+i)
3.  for (i = 0; i < n; i++){
		*(arr + i) = (int*)malloc(n * sizeof(int));
		for(j = 0; j < n; j++){
			*(*(arr + i) + j) = 0;
		}
	}
4.  You need the size because in C the array struct is essentially just a pointer, no end specified
    you need to know the size to ensure you dont go out of scope and access memory that isnt reserved for the array
5.  arr[0][0]: 0	arr[0][1]: 0	arr[0][2]: 0	arr[0][3]: 0	arr[0][4]: 0	
    arr[1][0]: 0	arr[1][1]: 0	arr[1][2]: 0	arr[1][3]: 0	arr[1][4]: 0	
    arr[2][0]: 0	arr[2][1]: 0	arr[2][2]: 0	arr[2][3]: 0	arr[2][4]: 0	
    arr[3][0]: 0	arr[3][1]: 0	arr[3][2]: 0	arr[3][3]: 0	arr[3][4]: 0	
    arr[4][0]: 0	arr[4][1]: 0	arr[4][2]: 0	arr[4][3]: 0	arr[4][4]: 0
    for (int i = 0; i < size; i++){
		for(int j = 0; j < size; j++){
			printf("arr[%x][%x]: %x\t",i,j, *(*(array + i) + j));
		}
		printf("\n");
	}
6.  for (i = 0; i < n; i++){
		*(*(arr + i) + i) = i+1;
	}
7.  arr[0][0]: 1	arr[0][1]: 0	arr[0][2]: 0	arr[0][3]: 0	arr[0][4]: 0	
    arr[1][0]: 0	arr[1][1]: 2	arr[1][2]: 0	arr[1][3]: 0	arr[1][4]: 0	
    arr[2][0]: 0	arr[2][1]: 0	arr[2][2]: 3	arr[2][3]: 0	arr[2][4]: 0	
    arr[3][0]: 0	arr[3][1]: 0	arr[3][2]: 0	arr[3][3]: 4	arr[3][4]: 0	
    arr[4][0]: 0	arr[4][1]: 0	arr[4][2]: 0	arr[4][3]: 0	arr[4][4]: 5

