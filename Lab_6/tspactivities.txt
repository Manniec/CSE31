TPS Activity 1:
1.  Text Segment: 0x00400000
    Data Segment: 0x10010000
2.  MIPS Source is the code line by line that is writen by the programmer in mips.
    while MIPS Basic is the commands translated and broken up into a format the 
    computer can translate into 32 bit segments. Registers turn into actual numbered 
    registers $0 to $31, and commands that take over 32 bits are broken into smaller 
    commands like lw being broken into a lui followed by ori. Basic code has a one to 
    one relationship with the machine code, while Source sometimes needs to be broken 
    into more than one command
3.  32 bytes 
4.  8 columns
5.  Each column can store one word which is 4 bytes
6.  to create a variable m and set it to 20
    m: .word 20 
    after .data you can change the value
7.  0x10010000 + 4, so 0x10010004 (click non hexadecimal values)
8.  str1: .asciiz "I love CSE31!"
    declares a string called str1 and sets it to "I love CSE31!"
9.  Value(+8), Value(+c), Value(+10), and Value(+14) (click ascii)
    0x10010008, 0x1001000c, 0x10010010 , 0x10010014
    ol I  |  C ev  |  13ES  |  \0\0\0!
10. each memory stores a , left to right, 
11. la $a0, str1    #make $a0 str1
	addi $v0, $0, 4 #or li $v0, 4 having $v0 equal 4 is for printing strings
    syscall
12. it loads register $t3 with address of n, which in hex is 0x10010000. In non-hex: 268500992

TPS Activity 2:
1.  less is better, dont over complicated the hardware, more functions mean more
    operations to encode which uses more memory
2.  n:  .word 25 
3.  str1: .asciiz "Less than\n"
    str2: .asciiz "Less than or equal to\n"
    str3: .asciiz "Greater than\n"
    str4: .asciiz "Greater than or equal to\n"
4.  Assign value of $v0 as 5, and call syscall after. 
    result is stored in $v0 and you move it to another register.
5&6.  main:	la 	$t0, n			#Load register $t0 with address of n
		    lw $t0, 0($t0)		#Loads register $t0 with value at $t0, which is n
	
		    li $v0, 5		    #set to take int input, saves it to $v0
		    syscall
		    move $t1, $v0		#save contents of user input to register $t1
	
		    slt $t2, $t1, $t0 	#if user input ($t1) < n ($t0) set $t2 to 1
		    beq $t2, $0, meq	# $t2 is 0, input >= n, 
		    la $a0, str1		#otherwise input < n (should output less than)
		    j finish

    meq:	la	$a0, str4		#if input >= n, set string to "Greater than or equal to"

    finish: li 	$v0, 4 			#output comparison
		    syscall
		    li $v0, 10		#End program	
		    syscall	
  
7.  	slt $t2, $t0, $t1 	#if user input ($t1) > n ($t0) set $t2 to 1
		bne $t2, $0, more	#if input > n ($t2 !=0, $t2 == 1) branched to more
		j finish
		
more:	la 	$a0, str3		#if input is greater than
		
finish: li 	$v0, 4 			#output comparison
		syscall
		li $v0, 10		    #End program	
		syscall	

8.  	slt $t2, $t0, $t1 	#if user input ($t1) > n ($t0) set $t2 to 1
		bne $t2, $0, more	#if input > n ($t2 !=0, $t2 == 1) branched to more
		la $a0, str2		#if input !> n (input <= n) print "Less than or equal to\n"
		j finish
		
more:	la 	$a0, str3		#if input is greater than
		
finish: li 	$v0, 4 			#output comparison
		syscall
		li $v0, 10		    #End program	
		syscall	

